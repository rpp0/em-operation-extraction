#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import pickle
import argparse
import scipy.signal
import os
from matplotlib import collections as mc
from common import *


def butter_filter(trace, order=1, cutoff=0.01, filter_type='low', fs=None):
    """
    Apply butter filter to trace
    """
    b, a = scipy.signal.butter(order, cutoff, btype=filter_type, fs=fs)
    trace_filtered = scipy.signal.filtfilt(b, a, trace)
    return trace_filtered


# Parse args
parser = argparse.ArgumentParser(description='Plot traces generated by emcap.debug_trace()')
parser.add_argument('type', default='debug', choices=['arch', 'debug', 'boot', 'stft'], type=str, help='Type of signal to plot')
parser.add_argument('--filter', default=False, action='store_true', help='Low pass filter trace before plotting')
args, unknown = parser.parse_known_args()

if args.type == 'debug':
    # Load trace
    a = np.load("/tmp/debug.npy")
    meta = None

    # Load metadata if present
    datatype = "unknown"
    try:
        meta = load_meta("/tmp/debug_meta.p")
        print(meta)
        datatype = meta["datatype"]
        plot_meta(meta)
    except FileNotFoundError:
        print("Warning: no metadata found. Not plotting bounds...")
        pass

    print(datatype + " trace")

    # Filter?
    if args.filter:
        if "complex" in datatype:
            a = butter_filter(a, 1, 0.001, 'high', None)  # Remove low freqs
            a = np.abs(a)
            a = butter_filter(a, 1, 0.001, 'high', None)  # Remove low freqs
        a = butter_filter(a, 1, 0.02, 'low', None)

    # Plot the data
    plt.plot(a)
    plt.show()
elif args.type == 'arch':
    for entry in get_arch_signal_paths():
        arch_signal_name = entry.rpartition('.npy')[0]
        path = os.path.join("./arch", entry)
        a = np.load(path)
        # Filter?
        if args.filter:
            a = butter_filter(a, 1, 0.02, 'low', None)
        plt.plot(a)
        plt.title(arch_signal_name)
        plt.show()
elif args.type == 'boot':
    for entry in get_arch_signal_paths("boot"):
        arch_signal_name = entry.rpartition('.npy')[0]
        path = os.path.join("./archboot", entry)
        a = np.load(path)
        debug_trace_specgram(a, 56000000, nfft=256, title=arch_signal_name)
elif args.type == 'stft':
    for entry in get_arch_signal_paths("stft"):
        arch_signal_name = entry.rpartition('.npy')[0]
        path = os.path.join("./archstft", entry)
        a = np.load(path)
        n = matplotlib.colors.LogNorm(vmin=0.000000000000001, vmax=0.000000001, clip=False)
        plt.title(arch_signal_name)
        plt.imshow(a, norm=n)
        plt.show()
else:
    raise Exception("Invalid action.")
